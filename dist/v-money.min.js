!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";t.a={prefix:"",suffix:"",thousands:",",decimal:".",precision:2}},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return f}),n.d(t,"a",function(){return l});var r=n(0);function i(e,t=r.a){"number"==typeof e&&(e=e.toFixed(a(t.precision)));var n=e.indexOf("-")>=0?"-":"",i=s(c(u(e),t.precision)).split("."),o=i[0],f=i[1];return o=function(e,t){return e.replace(/(\d)(?=(?:\d{3})+\b)/gm,`$1${t}`)}(o,t.thousands),t.prefix+n+function(e,t,n){return t?e+n+t:e}(o,f,t.decimal)+t.suffix}function o(e,t){var n=e.indexOf("-")>=0?-1:1,r=c(u(e),t);return parseFloat(r)*n}function u(e){return s(e).replace(/\D+/g,"")||"0"}function a(e){return t=0,n=e,r=20,Math.max(t,Math.min(n,r));var t,n,r}function c(e,t){var n=Math.pow(10,t);return(parseFloat(e)/n).toFixed(a(t))}function s(e){return e?e.toString():""}function f(e,t){var n=function(){e.setSelectionRange(t,t)};e===document.activeElement&&(n(),setTimeout(n,1))}function l(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}},function(e,t,n){"use strict";var r=n(1),i=n(0);t.a=function(e,t){if(t.value){var n,o,u=(n=i.a,o=t.value,n=n||{},o=o||{},Object.keys(n).concat(Object.keys(o)).reduce(function(e,t){return e[t]=void 0===o[t]?n[t]:o[t],e},{}));if("INPUT"!==e.tagName.toLocaleUpperCase()){var a=e.getElementsByTagName("input");1!==a.length||(e=a[0])}e.oninput=function(){var t=e.value.length-e.selectionEnd;e.value=Object(r.b)(e.value,u),t=Math.max(t,u.suffix.length),t=e.value.length-t,t=Math.max(t,u.prefix.length+1),Object(r.c)(e,t),e.dispatchEvent(Object(r.a)("change"))},e.onfocus=function(){},e.oninput(),e.dispatchEvent(Object(r.a)("input"))}}},function(e,t,n){"use strict";var r=function(){var e=this.$createElement;return(this._self._c||e)("input",{directives:[{name:"money",rawName:"v-money",value:{precision:this.precision,decimal:this.decimal,thousands:this.thousands,prefix:this.prefix,suffix:this.suffix},expression:"{precision, decimal, thousands, prefix, suffix}"}],staticClass:"v-money",attrs:{type:"tel"},domProps:{value:this.formattedValue},on:{change:this.change}})};r._withStripped=!0;var i=n(2),o=n(0),u=n(1);var a=function(e,t,n,r,i,o,u,a){var c,s="function"==typeof e?e.options:e;if(t&&(s.render=t,s.staticRenderFns=n,s._compiled=!0),r&&(s.functional=!0),o&&(s._scopeId="data-v-"+o),u?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(u)},s._ssrRegister=c):i&&(c=a?function(){i.call(this,this.$root.$options.shadowRoot)}:i),c)if(s.functional){s._injectStyles=c;var f=s.render;s.render=function(e,t){return c.call(t),f(e,t)}}else{var l=s.beforeCreate;s.beforeCreate=l?[].concat(l,c):[c]}return{exports:e,options:s}}({name:"Money",props:{value:{required:!0,type:[Number,String],default:0},masked:{type:Boolean,default:!1},precision:{type:Number,default:()=>o.a.precision},decimal:{type:String,default:()=>o.a.decimal},thousands:{type:String,default:()=>o.a.thousands},prefix:{type:String,default:()=>o.a.prefix},suffix:{type:String,default:()=>o.a.suffix}},directives:{money:i.a},data:()=>({formattedValue:""}),watch:{value:{immediate:!0,handler(e,t){var n=Object(u.b)(e,this.$props);n!==this.formattedValue&&(this.formattedValue=n)}}},methods:{change(e){this.$emit("input",this.masked?e.target.value:Object(u.d)(e.target.value,this.precision))}}},r,[],!1,null,null,null);a.options.__file="src/component.vue";t.a=a.exports},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"VERSION",function(){return u});var r=n(3);n.d(t,"Money",function(){return r.a});var i=n(2);n.d(t,"VMoney",function(){return i.a});var o=n(0);n.d(t,"options",function(){return o.a});const u=e.env.VERSION;function a(e,t){t&&Object.keys(t).map(function(e){o.a[e]=t[e]}),e.directive("money",i.a),e.component("money",r.a)}t.default=a,"undefined"!=typeof window&&window.Vue&&window.Vue.use(a)}.call(this,n(5))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(e){r=u}}();var c,s=[],f=!1,l=-1;function d(){f&&c&&(f=!1,c.length?s=c.concat(s):l=-1,s.length&&p())}function p(){if(!f){var e=a(d);f=!0;for(var t=s.length;t;){for(c=s,s=[];++l<t;)c&&c[l].run();l=-1,t=s.length}c=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||f||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,